// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package logto

import (
	"context"
	"fmt"
	"github.com/klucherev/logto/internal/hooks"
	"github.com/klucherev/logto/internal/utils"
	"github.com/klucherev/logto/models/components"
	"github.com/klucherev/logto/retry"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// Logto endpoint address.
	"https://logto.rentavita.com",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

type sdkConfiguration struct {
	Client            HTTPClient
	Security          func(context.Context) (interface{}, error)
	ServerURL         string
	ServerIndex       int
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
	UserAgent         string
	RetryConfig       *retry.Config
	Hooks             *hooks.Hooks
	Timeout           *time.Duration
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	if c.ServerURL != "" {
		return c.ServerURL, nil
	}

	return ServerList[c.ServerIndex], nil
}

// Logto API references: API references for Logto services.
type Logto struct {
	// Application represents your registered software program or service that has been authorized to access user information and perform actions on behalf of users within the system. Currently, Logto supports four types of applications:
	//
	// - Traditional web
	//
	// - Single-page app
	// - Native app
	// - Machine-to-machine app.
	//
	// Depending on the application type, it may have different authentication flows and access to the system. See [üîó Integrate Logto in your application](https://docs.logto.io/docs/recipes/integrate-logto/) to learn more about how to integrate Logto into your application.
	//
	// Role-based access control (RBAC) is supported for machine-to-machine applications. See [üîê Role-based access control (RBAC)](https://docs.logto.io/docs/recipes/rbac/) to get started with role-based access control.
	Applications *Applications
	// Endpoints for managing Logto global configurations for the tenant, such as admin console config and OIDC signing keys.
	//
	// See [üîë Signing keys](https://docs.logto.io/docs/recipes/signing-keys-rotation/) to learn more about signing keys and key rotation.
	Configs *Configs
	// Connectors are the bridge between Logto and other third-party vendors who provide short message service (SMS), email service, or user information on wildly accepted social media.
	//
	// To learn more about connectors, please see [ü™õ Configure connectors](https://docs.logto.io/docs/recipes/configure-connectors/).
	Connectors *Connectors
	// Connector factories are used to create connectors. They can be treated as preconfigured templates for connectors.
	ConnectorFactories *ConnectorFactories
	// Resources (API resources) represent the APIs that you want to protect with Logto. Each resource has a unique indicator (URI) and a set of scopes (permissions). The resources will be used in the authorization process which conforms to [RFC 8707: Resource Indicators for OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8707.html).
	//
	// See [‚öîÔ∏è Protect your API](https://docs.logto.io/docs/recipes/protect-your-api/) to learn more about how to define API resources and protect your APIs with Logto.
	Resources *Resources
	// Endpoints for customizing Logto sign-in experience. See [üé® Customize sign-in experience](https://docs.logto.io/docs/recipes/customize-sie/) to learn more about how the configuration works and reflects on the user interface.
	SignInExperience *SignInExperience
	// Endpoints for user management. Including creating, updating, deleting, and querying users with flexible filters. In addition to the endpoints, see [üßë‚ÄçüöÄ Manage users](https://docs.logto.io/docs/recipes/manage-users/) for more insights.
	Users *Users
	// Audit logs are used to track end-user activities in Logto sign-in experience and other flows. It does not include activities in Logto Console.
	AuditLogs *AuditLogs
	// Role management for API resource RBAC (role-based access control). See [üîê Role-based access control (RBAC)](https://docs.logto.io/docs/recipes/rbac/) to get started with role-based access control.
	Roles *Roles
	// Endpoints that power the dashboard page of Console to show the statistics of the current tenant.
	Dashboard *Dashboard
	// Endpoints for managing custom phrases that allow you to customize the phrases displayed in the sign-in experience.
	//
	// See [Localized language](https://docs.logto.io/docs/recipes/customize-sie/localized-language/) to learn more about custom phrases for localization.
	CustomPhrases *CustomPhrases
	// Hook enables you to effortlessly receive real-time updates regarding specific events, such as user registration, sign-in, or password reset. See [ü™ù Webhooks] to get started and learn more.
	Hooks *Hooks
	// Endpoints for handling verification codes. It is helpful when building a custom profile page in your app. See [üë§ User profile](https://docs.logto.io/docs/recipes/user-profile/#optional-validate-verification-code) for more details.
	//
	// Note: Before you call the endpoints, you need to setup your email/SMS connector first.
	VerificationCodes *VerificationCodes
	// Endpoints for managing user uploaded assets.
	UserAssets *UserAssets
	// Custom domain lets you present a consistent brand by having your own domain name on the sign-in and registration pages. See [üåç Custom domain](https://docs.logto.io/docs/recipes/custom-domain/) for more details.
	Domains *Domains
	// Organization roles are used to define a set of organization scopes that can be assigned to users. Every organization role is a part of the organization template.
	//
	// Organization roles will only be meaningful within an organization context. For example, a user may have an `admin` role for organization A, but not for organization B. See [üè¢ Organizations (Multi-tenancy)](https://docs.logto.io/docs/recipes/organizations/) to get started with organizations and organization template.
	OrganizationRoles *OrganizationRoles
	// Organization scopes (permissions) are used to define actions that can be performed on a organization. Every organization scope is a part of the organization template.
	//
	// Organization scopes will only be meaningful within an organization context. For example, a user may have a `read` scope for organization A, but not for organization B. See [üè¢ Organizations (Multi-tenancy)](https://docs.logto.io/docs/recipes/organizations/) to get started with organizations and organization template.
	OrganizationScopes *OrganizationScopes
	// Organization invitations are used to invite users to join an organization. They are sent via email and contain a link that the user can click to accept the invitation and join the organization.
	OrganizationInvitations *OrganizationInvitations
	// Organization is a concept that brings together multiple identities (mostly users). Logto supports multiple organizations, and each organization can have multiple users.
	//
	// Every organization shares the same set (organization template) of roles and permissions. Each user can have different roles in different organizations. See [üè¢ Organizations (Multi-tenancy)](https://docs.logto.io/docs/recipes/organizations/) to get started with organizations and organization template.
	Organizations *Organizations
	// Endpoints for SSO (single sign-on) connector providers.
	//
	// SSO connector providers provide the metadata and configuration templates for creating SSO connectors.
	SSOConnectorProviders *SSOConnectorProviders
	// Endpoints for managing single sign-on (SSO) connectors. Your sign-in experience can use these well-configured SSO connectors to authenticate users and sync user attributes from external identity providers (IdPs).
	//
	// SSO connectors are created by SSO connector provider factories.
	SSOConnectors *SSOConnectors
	// Endpoints for system constants and information.
	Systems *Systems
	// The subject token API provides the ability to create a new subject token for the use of impersonating the user.
	SubjectTokens *SubjectTokens
	// Customize your account API settings.
	AccountCenter *AccountCenter
	// SAML (Security Assertion Markup Language) applications represent applications that use SAML protocol for single sign-on (SSO). These endpoints allow you to manage SAML applications, including their configurations and signing certificates.
	SAMLApplications *SAMLApplications
	// Manage custom i18n email templates for various types of emails, such as sign-in verification codes and password resets.
	EmailTemplates *EmailTemplates
	// One-time tokens are used for various authentication and verification purposes. They are typically sent via email and have an expiration time.
	OneTimeTokens *OneTimeTokens
	// Setup the captcha provider.
	CaptchaProvider *CaptchaProvider
	// Sentinel activities are used to track and manage user authentication attempts, including successful and failed attempts. Based on your sentinel policy settings, Logto will automatically block users after a certain number of failed attempts. This helps to prevent unauthorized access and protect sensitive data.
	SentinelActivities *SentinelActivities
	// Well-Known routes provide information and resources that can be discovered by clients without the need for authentication.
	WellKnown *WellKnown
	// Endpoints for health check.
	Status *Status
	// Authentication endpoints for third-party integrations and identity providers.
	Authn *Authn
	// Endpoints for SAML (Security Assertion Markup Language) applications auth flow.
	SAMLApplicationsAuthFlow *SAMLApplicationsAuthFlow
	Swagger                  *Swagger
	// The Experience endpoints allow end-users to interact with Logto for identity verification and profile completion.
	Experience *Experience
	// Account routes provide functionality for managing user profile for the end user to interact directly with access tokens.
	MyAccount *MyAccount
	// Endpoints for creating and validating verification records, which can be used in Profile routes.
	Verifications *Verifications
	// Interaction endpoints are used to manage and process interactions for end-users, such as sign-in experience. Interaction endpoints are legacy endpoints that are used internally, will be replaced with Experience endpoints instead.
	Interaction *Interaction

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*Logto)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Logto) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Logto) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *Logto) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Logto) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security components.Security) SDKOption {
	return func(sdk *Logto) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *Logto) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *Logto) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *Logto) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Logto {
	sdk := &Logto{
		sdkConfiguration: sdkConfiguration{
			Language:          "go",
			OpenAPIDocVersion: "Cloud",
			SDKVersion:        "0.0.1",
			GenVersion:        "2.610.0",
			UserAgent:         "speakeasy-sdk/go 0.0.1 2.610.0 Cloud github.com/klucherev/logto",
			Hooks:             hooks.New(),
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	if sdk.sdkConfiguration.Security == nil {
		var envVarSecurity components.Security
		if utils.PopulateSecurityFromEnv(&envVarSecurity) {
			sdk.sdkConfiguration.Security = utils.AsSecuritySource(envVarSecurity)
		}
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.sdkConfiguration.Hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if serverURL != currentServerURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.Applications = newApplications(sdk.sdkConfiguration)

	sdk.Configs = newConfigs(sdk.sdkConfiguration)

	sdk.Connectors = newConnectors(sdk.sdkConfiguration)

	sdk.ConnectorFactories = newConnectorFactories(sdk.sdkConfiguration)

	sdk.Resources = newResources(sdk.sdkConfiguration)

	sdk.SignInExperience = newSignInExperience(sdk.sdkConfiguration)

	sdk.Users = newUsers(sdk.sdkConfiguration)

	sdk.AuditLogs = newAuditLogs(sdk.sdkConfiguration)

	sdk.Roles = newRoles(sdk.sdkConfiguration)

	sdk.Dashboard = newDashboard(sdk.sdkConfiguration)

	sdk.CustomPhrases = newCustomPhrases(sdk.sdkConfiguration)

	sdk.Hooks = newHooks(sdk.sdkConfiguration)

	sdk.VerificationCodes = newVerificationCodes(sdk.sdkConfiguration)

	sdk.UserAssets = newUserAssets(sdk.sdkConfiguration)

	sdk.Domains = newDomains(sdk.sdkConfiguration)

	sdk.OrganizationRoles = newOrganizationRoles(sdk.sdkConfiguration)

	sdk.OrganizationScopes = newOrganizationScopes(sdk.sdkConfiguration)

	sdk.OrganizationInvitations = newOrganizationInvitations(sdk.sdkConfiguration)

	sdk.Organizations = newOrganizations(sdk.sdkConfiguration)

	sdk.SSOConnectorProviders = newSSOConnectorProviders(sdk.sdkConfiguration)

	sdk.SSOConnectors = newSSOConnectors(sdk.sdkConfiguration)

	sdk.Systems = newSystems(sdk.sdkConfiguration)

	sdk.SubjectTokens = newSubjectTokens(sdk.sdkConfiguration)

	sdk.AccountCenter = newAccountCenter(sdk.sdkConfiguration)

	sdk.SAMLApplications = newSAMLApplications(sdk.sdkConfiguration)

	sdk.EmailTemplates = newEmailTemplates(sdk.sdkConfiguration)

	sdk.OneTimeTokens = newOneTimeTokens(sdk.sdkConfiguration)

	sdk.CaptchaProvider = newCaptchaProvider(sdk.sdkConfiguration)

	sdk.SentinelActivities = newSentinelActivities(sdk.sdkConfiguration)

	sdk.WellKnown = newWellKnown(sdk.sdkConfiguration)

	sdk.Status = newStatus(sdk.sdkConfiguration)

	sdk.Authn = newAuthn(sdk.sdkConfiguration)

	sdk.SAMLApplicationsAuthFlow = newSAMLApplicationsAuthFlow(sdk.sdkConfiguration)

	sdk.Swagger = newSwagger(sdk.sdkConfiguration)

	sdk.Experience = newExperience(sdk.sdkConfiguration)

	sdk.MyAccount = newMyAccount(sdk.sdkConfiguration)

	sdk.Verifications = newVerifications(sdk.sdkConfiguration)

	sdk.Interaction = newInteraction(sdk.sdkConfiguration)

	return sdk
}
